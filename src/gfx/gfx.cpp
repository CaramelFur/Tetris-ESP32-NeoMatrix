#include "gfx.hpp"

// Starts at 0x40
const uint8_t fontH = 5;
const uint8_t fontW = 4;
const uint8_t font[95][5] = {
    {0x0, 0x0, 0x0, 0x0, 0x0},
    {0xc0, 0xc0, 0xc0, 0x0, 0xc0},
    {0xa0, 0xa0, 0x0, 0x0, 0x0},
    {0xa0, 0xe0, 0xa0, 0xe0, 0xa0},
    {0x40, 0xe0, 0xc0, 0x60, 0xe0},
    {0xa0, 0x60, 0xc0, 0xa0, 0x0},
    {0x40, 0x40, 0xe0, 0xc0, 0x40},
    {0x20, 0x60, 0x0, 0x0, 0x0},
    {0x20, 0x40, 0x40, 0x40, 0x20},
    {0x80, 0x40, 0x40, 0x40, 0x80},
    {0xa0, 0x40, 0xe0, 0x40, 0xa0},
    {0x0, 0x40, 0xe0, 0x40, 0x0},
    {0x0, 0x0, 0x0, 0x40, 0xc0},
    {0x0, 0x0, 0xe0, 0x0, 0x0},
    {0x0, 0x0, 0x0, 0xc0, 0xc0},
    {0x20, 0x20, 0x40, 0x40, 0x80},
    {0x40, 0xa0, 0xa0, 0xa0, 0x40},
    {0x40, 0xc0, 0x40, 0x40, 0x40},
    {0xc0, 0x20, 0x40, 0x80, 0xe0},
    {0xc0, 0x20, 0x60, 0x20, 0xe0},
    {0xa0, 0xa0, 0xa0, 0xe0, 0x20},
    {0xe0, 0x80, 0xc0, 0x20, 0xc0},
    {0x60, 0x80, 0xe0, 0xa0, 0xe0},
    {0xe0, 0x20, 0x20, 0x40, 0x40},
    {0xe0, 0xa0, 0xe0, 0xa0, 0xe0},
    {0xe0, 0xa0, 0xe0, 0x20, 0xc0},
    {0xc0, 0xc0, 0x0, 0xc0, 0xc0},
    {0xc0, 0xc0, 0x0, 0x40, 0xc0},
    {0x20, 0x40, 0x80, 0x40, 0x20},
    {0x0, 0xe0, 0x0, 0xe0, 0x0},
    {0x80, 0x40, 0x20, 0x40, 0x80},
    {0xe0, 0x20, 0x60, 0x0, 0x40},
    {0x60, 0xa0, 0xc0, 0x80, 0x60},
    {0xe0, 0xa0, 0xe0, 0xa0, 0xa0},
    {0xe0, 0xa0, 0xc0, 0xa0, 0xe0},
    {0xe0, 0x80, 0x80, 0x80, 0xe0},
    {0xc0, 0xa0, 0xa0, 0xa0, 0xc0},
    {0xe0, 0x80, 0xe0, 0x80, 0xe0},
    {0xe0, 0x80, 0xe0, 0x80, 0x80},
    {0xe0, 0x80, 0xa0, 0xa0, 0xe0},
    {0xa0, 0xa0, 0xe0, 0xa0, 0xa0},
    {0xe0, 0x40, 0x40, 0x40, 0xe0},
    {0x20, 0x20, 0x20, 0xa0, 0xe0},
    {0xa0, 0xa0, 0xc0, 0xa0, 0xa0},
    {0x80, 0x80, 0x80, 0x80, 0xe0},
    {0xa0, 0xe0, 0xa0, 0xa0, 0xa0},
    {0xe0, 0xa0, 0xa0, 0xa0, 0xa0},
    {0xe0, 0xa0, 0xa0, 0xa0, 0xe0},
    {0xe0, 0xa0, 0xe0, 0x80, 0x80},
    {0xe0, 0xa0, 0xa0, 0xc0, 0x60},
    {0xe0, 0xa0, 0xc0, 0xa0, 0xa0},
    {0xe0, 0x80, 0xe0, 0x20, 0xe0},
    {0xe0, 0x40, 0x40, 0x40, 0x40},
    {0xa0, 0xa0, 0xa0, 0xa0, 0xe0},
    {0xa0, 0xa0, 0xa0, 0xa0, 0x40},
    {0xa0, 0xa0, 0xa0, 0xe0, 0xa0},
    {0xa0, 0xe0, 0x40, 0xe0, 0xa0},
    {0xa0, 0xa0, 0xe0, 0x40, 0x40},
    {0xe0, 0x20, 0x40, 0x80, 0xe0},
    {0x60, 0x40, 0x40, 0x40, 0x60},
    {0x80, 0x80, 0x40, 0x40, 0x20},
    {0xc0, 0x40, 0x40, 0x40, 0xc0},
    {0x40, 0xa0, 0x0, 0x0, 0x0},
    {0x0, 0x0, 0x0, 0x0, 0xe0},
    {0x40, 0x60, 0x0, 0x0, 0x0},
    {0x0, 0xe0, 0x60, 0xa0, 0xe0},
    {0x80, 0xe0, 0xa0, 0xa0, 0xe0},
    {0x0, 0xe0, 0x80, 0x80, 0xe0},
    {0x20, 0xe0, 0xa0, 0xa0, 0xe0},
    {0x0, 0xe0, 0xa0, 0xc0, 0xe0},
    {0x60, 0x80, 0xc0, 0x80, 0x80},
    {0x0, 0xe0, 0xa0, 0x60, 0xe0},
    {0x80, 0xe0, 0xa0, 0xa0, 0xa0},
    {0x0, 0x40, 0x40, 0x40, 0x40},
    {0x0, 0x20, 0x20, 0xa0, 0xe0},
    {0x80, 0xa0, 0xc0, 0xc0, 0xa0},
    {0xc0, 0x40, 0x40, 0x40, 0x40},
    {0x0, 0xa0, 0xe0, 0xa0, 0xa0},
    {0x0, 0xe0, 0xa0, 0xa0, 0xa0},
    {0x0, 0xe0, 0xa0, 0xa0, 0xe0},
    {0x0, 0xe0, 0xa0, 0xe0, 0x80},
    {0x0, 0xe0, 0xa0, 0xe0, 0x20},
    {0x0, 0xe0, 0xa0, 0x80, 0x80},
    {0x0, 0xe0, 0xc0, 0x60, 0xe0},
    {0x40, 0xe0, 0x40, 0x40, 0x60},
    {0x0, 0xa0, 0xa0, 0xa0, 0xe0},
    {0x0, 0xa0, 0xa0, 0xa0, 0x40},
    {0x0, 0xa0, 0xa0, 0xe0, 0xa0},
    {0x0, 0xa0, 0x40, 0x40, 0xa0},
    {0x0, 0xa0, 0xa0, 0x60, 0xc0},
    {0x0, 0xe0, 0x60, 0xc0, 0xe0},
    {0x60, 0x40, 0xc0, 0x40, 0x60},
    {0x40, 0x40, 0x40, 0x40, 0x40},
    {0xc0, 0x40, 0x60, 0x40, 0xc0},
    {0x0, 0xc0, 0x60, 0x0, 0x0},
};

// For drawing

void GFX::drawString(char *str, uint8_t x, uint8_t y, CRGB color = CRGB::White){
  uint8_t i = 0;
  while(i < 255 && str[i] != 0){
    uint8_t findex = str[i] - 32;
    Serial.print("Findex: ");
    Serial.println(findex);
    this->drawBitmap((uint8_t *) font[findex], fontW, fontH, x + (i * (fontW)), y, color);
    i++;
  }
}

void GFX::drawBitmap(uint8_t *bitmap, uint8_t width, uint8_t height, uint8_t x, uint8_t y, CRGB color = CRGB::White)
{
  for (uint8_t h = 0; h < height; h++)
  {
    for (uint8_t w = 0; w < width; w++)
    {
      uint8_t col = w / 8;
      uint8_t bit = 7 - (w % 8);

      if (bitmap[col * height + h] & (1 << bit))
      {
        this->drawPixel(x + w, y + h, color);
      }
    }
  }
}

void GFX::fill(CRGB color)
{
  for (uint16_t i = 0; i < this->ledCount; i++)
  {
    this->pixels[i] = color;
  }
}

void GFX::drawPixel(uint8_t x, uint8_t y, CRGB color)
{
  if(x < 0 || y < 0) return;
  if(x >= this->width || y >= this->height) return;
  this->pixels[this->XY(x, y)] = color;
}

// Operational

GFX::GFX(uint8_t width, uint8_t height) : width(width), height(height), ledCount(height * width)
{
  this->pixels = new CRGB[ledCount];
}

void GFX::init()
{
  FastLED.addLeds<NEOPIXEL, LED_PIN>(this->pixels, this->width * this->height);
  FastLED.setCorrection(TypicalLEDStrip);
  this->fill(CRGB::Black);
  FastLED.show();
}

void GFX::init(uint8_t brightness)
{
  FastLED.setBrightness(brightness);
  return this->init();
}

void GFX::clear()
{
  this->fill(CRGB::Black);
}

uint16_t GFX::XY(uint8_t x, uint8_t y)
{
  uint8_t reverseY = (this->height - 1) - y;

  if (reverseY & 0x01)
    return (reverseY * this->width) + x;

  uint8_t reverseX = (this->width - 1) - x;
  uint16_t output = (reverseY * this->width) + reverseX;

  /*if (output >= this->ledCount)
    output = this->ledCount - 1;
  if (output < 0)
    output = 0;*/
  return output;
}

void GFX::setBrightness(uint8_t scale)
{
  FastLED.setBrightness(scale);
}

void GFX::show()
{
  FastLED.show();
}